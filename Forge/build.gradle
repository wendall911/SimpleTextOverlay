plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin'
    id 'net.darkhax.curseforgegradle' version '1.+'
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.71.8'
    id 'com.modrinth.minotaur' version '2.+'
}

version = "${minecraft_version}-${mod_version}-FORGE"
archivesBaseName = "${mod_id}"

mixin {
    add sourceSets.main, "${mod_id}-refmap.json"

    config "${mod_id}.mixins.json"
}

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}-${minecraft_version}"

    runs {
        client {
            workingDirectory project.file("run")
            arg "-mixin.config=${mod_id}.mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'

            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')
            arg "-mixin.config=${mod_id}.mixins.json"
            arg "nogui"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }    
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":Common")
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation fg.deobf(group: 'com.illusivesoulworks.spectrelib', name: 'spectrelib-forge', version: "${spectrelib_range}")
    jarJar fg.deobf(group: 'com.illusivesoulworks.spectrelib', name: 'spectrelib-forge', version: "${spectrelib_range}") {
        jarJar.pin(it, "${spectrelib_version}")
    }
    implementation fg.deobf("curse.maven:sereneseasons-291874:${serene_seasons_forge_version}")
    implementation fg.deobf("curse.maven:corpse-316582:${corpse_version}")
}

compileJava {
    source(project(":Common").sourceSets.main.allSource)
    options.compilerArgs << "-Xlint:all,-classfile,-processing,-deprecation,-serial" << "-Werror"
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta', '*.mixins.json']
def replaceProperties = [
    'version': version, 'forge_mc_version_range': forge_mc_version_range, 'forge_version_range': forge_version_range,
    'license': license, 'mod_id': mod_id, 'mod_author': mod_author, 'mod_description': mod_description,
    'mod_name': mod_name, 'issue_tracker': issue_tracker, 'mod_credits': mod_credits,
    'loader_version_range': loader_version_range, 'mod_update_branch': mod_update_branch
]

processResources {
    from project(":Common").sourceSets.main.resources
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    inputs.properties replaceProperties
    exclude '.cache'
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

tasks.jarJar.finalizedBy('reobfJar')
jar.finalizedBy('reobfJarJar', 'signJar')

reobf {
    jarJar {}
}

tasks.jarJar.configure {
    archiveClassifier.set("")
}

jarJar {
    enable()
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

task changelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    file = new File(project(":").projectDir.toString() + '/build/libs/changelog.txt');
    templateContent = file(project(":").projectDir.toString() + '/files/templates/changelog.mustache').getText('UTF-8');
    fromRepo = file("$projectDir");
    toRef = "HEAD";
    fromRef = "${minecraft_version}-${last_mod_version}";
}

def updates = tasks.register("generateUpdates", Copy) {
    it.outputs.upToDateWhen {
        false
    }

    it.from("../files/templates/") {
        include 'updates.json'
        expand 'version': version, 'minecraft_version': minecraft_version
    }

    it.into '../files/'
}

tasks.generateUpdates.mustRunAfter('jar')

tasks.build.dependsOn('changelog', 'generateUpdates')

// Jar Signing
import net.minecraftforge.gradle.common.tasks.SignJar

task signJar(type: SignJar, dependsOn: jar) {
    dependsOn 'reobfJar'

    // Skip the task if our secret data isn't available
    onlyIf {
        project.hasProperty('keyStore')
    }

    keyStore = project.keyStore // This needs to be a path to the keystore file
    alias = project.keyStoreAlias
    storePass = project.keyStorePass
    keyPass = project.keyStoreKeyPass
    inputFile = jar.archiveFile
    outputFile = jar.archiveFile
}

def changelogFile = project(":").projectDir.toString() + '/build/libs/changelog.txt'

task curseforge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    if (project.hasProperty('stocurseApiKey')) {
        apiToken = project.stocurseApiKey
        def mainFile = upload(project.stocurseId, file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))
        mainFile.changelog = file(changelogFile)
        mainFile.addJavaVersion('Java 17')
        mainFile.addModLoader('Forge')
        mainFile.addModLoader('NeoForge')
        mainFile.releaseType = "${release_type}"
        "${release_versions}".split(',').each {
            mainFile.addGameVersion("${it}")
        }
        mainFile.addOptional('configured')
        mainFile.addOptional('catalogue')
        mainFile.addOptional('serene-seasons')
    }
}

modrinth {
    if (project.hasProperty('stoModrinthId')) {
        token = project.modrinthKey
        projectId = project.stoModrinthId
        version = getVersion()
        versionType = "${release_type}"
        if (file(changelogFile).exists()) {
            changelog = file(changelogFile).text
        }
        uploadFile = file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")
        gameVersions = "${release_versions}".split(",") as List<String>
        loaders = ['neoforge', 'forge']
        dependencies {
        }
    }
}

