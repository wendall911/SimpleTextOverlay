plugins {
    id 'multiloader-loader'
    id 'net.minecraftforge.gradle' version '[6.0.24,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'net.darkhax.curseforgegradle' version '1.+'
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.71.8'
    id 'com.modrinth.minotaur' version '2.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

archivesBaseName = "${mod_id}"
version = forge_mod_version

mixin {
    add sourceSets.main, "${mod_id}-refmap.json"

    config "${mod_id}.mixins.json"
}

minecraft {
    mappings channel: "${mappings_channel}", version: "${parchment_version}-${parchment_mc_version}"
    reobf = false
    copyIdeResources = true

    runs {
        client {
            workingDirectory file('runs/client')
            ideaModule "${rootProject.name}.${project.name}.main"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args "-mixin.config=${mod_id}.mixins.json"
            mods {
                modClientRun {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory file('runs/server')
            ideaModule "${rootProject.name}.${project.name}.main"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args "-mixin.config=${mod_id}.mixins.json"
            mods {
                modServerRun {
                    source sourceSets.main
                }
            }
        }
    }    
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    // Hack fix for now, force jopt-simple to be exactly 5.0.4 because Mojang ships that version, but some transtive dependencies request 6.0+
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }

    implementation fg.deobf(group: 'com.illusivesoulworks.spectrelib', name: 'spectrelib-forge', version: "${spectrelib_range}")
    jarJar fg.deobf(group: 'com.illusivesoulworks.spectrelib', name: 'spectrelib-forge', version: "${spectrelib_range}") {
        jarJar.pin(it, "${spectrelib_version}+${minecraft_version}")
    }
    implementation fg.deobf("curse.maven:sereneseasons-291874:${serene_seasons_forge_version}")
    implementation fg.deobf("curse.maven:glitchcore-955399:${glitch_core_forge_version}")
    compileOnly fg.deobf("curse.maven:corpse-316582:${corpse_version}")
}

jar.finalizedBy('jarJar')

sourceSets {
    main {
        resources {
            srcDirs += '../licenses'
        }
    }
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}

jar {
    manifest {
        attributes([
            "MixinConfigs": "${mod_id}.mixins.json"
        ])
    }
}

tasks.jarJar.configure {
    archiveClassifier.set("")
}

task changelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    file = new File(project(":").projectDir.toString() + '/build/libs/changelog.txt');
    templateContent = file(project(":").projectDir.toString() + '/files/templates/changelog.mustache').getText('UTF-8');
    fromRepo = file("$projectDir");
    toRef = "HEAD";
    fromRef = "${minecraft_version}-${last_mod_version}";
}

def updates = tasks.register("generateUpdates", Copy) {
    it.outputs.upToDateWhen {
        false
    }

    it.from("../files/templates/") {
        include 'updates.json'
        expand 'version': version, 'minecraft_version': minecraft_version
    }

    it.into '../files/forge'
}

tasks.generateUpdates.mustRunAfter('jar', 'sourcesJar')

tasks.build.dependsOn('changelog', 'generateUpdates')

def changelogFile = project(":").projectDir.toString() + '/build/libs/changelog.txt'

task curseforge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    if (project.hasProperty('stocurseApiKey')) {
        apiToken = project.stocurseApiKey
        def mainFile = upload(project.stocurseId, file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))
        mainFile.changelog = file(changelogFile)
        mainFile.addJavaVersion("Java ${java_version}")
        mainFile.addModLoader('Forge')
        mainFile.releaseType = "${release_type}"
        "${release_versions}".split(',').each {
            mainFile.addGameVersion("${it}")
        }
        mainFile.addOptional('configured')
        mainFile.addOptional('catalogue')
        mainFile.addOptional('serene-seasons')
    }

    dependsOn('jarJar')
}

modrinth {
    if (project.hasProperty('stoModrinthId')) {
        token = project.modrinthKey
        projectId = project.stoModrinthId
        version = getVersion()
        versionType = "${release_type}"
        if (file(changelogFile).exists()) {
            changelog = file(changelogFile).text
        }
        uploadFile = file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")
        gameVersions = "${release_versions}".split(",") as List<String>
        loaders = ['forge']
        dependencies {
            optional.project 'serene-seasons'
        }
    }
}

tasks.modrinth.dependsOn('jarJar')
